///////////////////////////////////////////////////////////////////////////
//
//  AM_Cache.hpp
//
///////////////////////////////////////////////////////////////////////////

#ifndef _AM_CACHE_H_
#define _AM_CACHE_H_

///////////////////////////////////////////////////////////////////////////
// INCLUDES
///////////////////////////////////////////////////////////////////////////
#include "AM_Export.h"
#include "x_types.hpp"

///////////////////////////////////////////////////////////////////////////
// DEFINES / MACROS
///////////////////////////////////////////////////////////////////////////

class mocap_player;

///////////////////////////////////////////////////////////////////////////
// PRIMARY OR SECONDARY STORAGE
///////////////////////////////////////////////////////////////////////////

#ifdef TARGET_PS2
    #define ANIMPLAY_PRIMARY_STORAGE
#endif

#ifdef TARGET_DOLPHIN
    #define ANIMPLAY_PRIMARY_STORAGE
#endif

#ifdef TARGET_XBOX
    #define ANIMPLAY_PRIMARY_STORAGE
#endif

#ifdef TARGET_PC
    #define ANIMPLAY_PRIMARY_STORAGE
#endif


///////////////////////////////////////////////////////////////////////////
//	STRUCTS
///////////////////////////////////////////////////////////////////////////

struct SMotionBlock
{
	s32             ID;					// ID of block we are in
	s32             Frame0;				// First frame this block (in 60 f/s values).
	s32             FrameN;				// Last frame this block (in 60 f/s values).
	s16*            pData;					// Ptr to decompressed anim data
};


///////////////////////////////////////////////////////////////////////////
// PRIVATE PROTOTYPES
///////////////////////////////////////////////////////////////////////////

void    AMCACHE_InitModule          (s32            TotalStaticBuffers, 
                                     s32            TotalDynamicBuffers, 
                                     s32            MaxStreams,
									 s32			MaxFramesPerBlock);

void    AMCACHE_KillModule          (void);

void	AMCACHE_LockBlock			( anim_group*	pAnimGroup,
									  anim_info*	pAnimInfo,
									  SMotionBlock&	rBlock,
									  f32			ExportFrame );

void	AMCACHE_UnlockBlock			( anim_group*	pAnimGroup,
									  anim_info*	pAnimInfo,
									  SMotionBlock&	rBlock );

void	AMCACHE_ResetBlock			( SMotionBlock&	rBlock );




///////////////////////////////////////////////////////////////////////////
//	INLINED FUNCTIONS
///////////////////////////////////////////////////////////////////////////

inline void AMCACHE_ResetBlock( SMotionBlock& rBlock )
{
	rBlock.ID		= -1;
	rBlock.Frame0	= 1;
	rBlock.FrameN	= -1;
	rBlock.pData	= NULL;
}

///////////////////////////////////////////////////////////////////////////
//  FINISHED
///////////////////////////////////////////////////////////////////////////


#endif
