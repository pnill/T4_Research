////////////////////////////////////////////////////////////////////////////
//
//  AUX_RAM.HPP
//
////////////////////////////////////////////////////////////////////////////

#ifndef AUX_RAM_HPP
#define AUX_RAM_HPP

////////////////////////////////////////////////////////////////////////////
//  INCLUDES
////////////////////////////////////////////////////////////////////////////

#ifndef X_TYPES_HPP
#include "x_types.hpp"
#endif

////////////////////////////////////////////////////////////////////////////
//  DEBUG DEFINES
////////////////////////////////////////////////////////////////////////////
//
//  The following values can be defined to assist in debugging problems
//  with dynamic memory.
//
//  X_DEBUG     - Will catch most errors without severe performance hit.
//  SLOW_MEMORY - Will catch even more errors, but runs slowly.
//              
////////////////////////////////////////////////////////////////////////////

#define AUXRAM_ROUNDUP32(x)     (((u32)(x) + 0x1F) & ~(0x1F))
#define AUXRAM_ROUNDDOWN32(x)   ((u32)(x) & ~(0x1F))
#define AUXRAM_IS_ALIGN32(x)    (((u32)(x) & 0x1F) == 0)


////////////////////////////////////////////////////////////////////////////
//  FUNCTIONS
////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
//
//  AUXRAM DMA Transfer Functions
//
//  Any memory allocated in ARAM can only be filled using DMA transfer
//  functions.  The AUXRAM functions are really just simple wrappers
//  to the ARQ functions.
//
////////////////////////////////////////////////////////////////////////////

void AUXRAM_SendToAram      ( void* pSrc,  void* pARAMDest, u32 Size );
void AUXRAM_ReadFromAram    ( void* pDest, void* pARAMSrc,  u32 Size );
void AUXRAM_StopTransfers   ( void );

////////////////////////////////////////////////////////////////////////////
//
//  Memory initialization
//
////////////////////////////////////////////////////////////////////////////

void  AUXRAM_MemoryInit     ( void );
void  AUXRAM_MemoryKill     ( void );

////////////////////////////////////////////////////////////////////////////
//
//  Memory allocation
//
//  Regular malloc and free are replaced with the equivalent x_malloc and
//  x_free.  These allocations are 32 BYTE ALIGNED!
//
////////////////////////////////////////////////////////////////////////////

void* AUXRAM_malloc         ( s32   NBytes  );
void  AUXRAM_free           ( void* pMemory );

void  AUXRAM_DumpHeapInfo   ( char* pFileName );

////////////////////////////////////////////////////////////////////////////
//
// Memory Movement Function (x_plus functions related directly to memory)
//
// Memcpy and Memset are the two functions that make the most sense in
// having for aram.  These functions will mask the process of dealing with
// memory transfers, even though you could do this yourself using the DMA
// send functions.
//
////////////////////////////////////////////////////////////////////////////

void*   AUXRAM_memset       ( void* pBuf, s32 C, s32 Count );



////////////////////////////////////////////////////////////////////////////
//
//  DON'T LOOK DOWN HERE!
//
//  These prototypes and macros are here to change the manager's
//  behavior under debug and release compiles.
//
////////////////////////////////////////////////////////////////////////////

#ifdef X_DEBUG

    #define AUXRAM_malloc(S)        AUXRAM_fn_malloc  ( (S), __FILE__, __LINE__ )

#else

    #define AUXRAM_malloc(S)        AUXRAM_fn_malloc  ( (S), "", 0 )

#endif

////////////////////////////////////////////////////////////////////////////
// Prototype the 'fn' functions.

void* AUXRAM_fn_malloc( s32    NBytes,
                        char*  pFileName,
                        s32    LineNumber );

////////////////////////////////////////////////////////////////////////////

#endif // AUX_RAM_HPP
