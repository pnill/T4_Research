/////////////////////////////////////////////////////////////////////////////
//
//  ORBITCAM.HPP
//
/////////////////////////////////////////////////////////////////////////////
#ifndef ORBITCAM_HPP
#define ORBITCAM_HPP


/////////////////////////////////////////////////////////////////////////////
// INCLUDES
/////////////////////////////////////////////////////////////////////////////
#include "Q_View.hpp"

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
// ORBIT CAMERA
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class orbitcam : public view
{
/////////////////////////////////////////////////////////////////////////////
public: 
        orbitcam( );        
        orbitcam( f32 NearZ, f32 FarZ );

/////////////////////////////////////////////////////////////////////////////
public:

    void	SetTarget   ( const vector3& T );
    void	GetTarget   ( vector3& T       );
    void	AddDistance ( f32 Distance     );
    void	AddPitch    ( radian Pitch     );
    void	AddYaw      ( radian Yaw       );

    void	SetDistance ( f32 Distance     );
    void	GetDistance ( f32& Distance    );
    void	SetPitch    ( radian Pitch     );
    void	GetPitch    ( radian& Pitch    );
    void	SetYaw      ( radian Yaw       );
    void	GetYaw      ( radian& Yaw      );

    void	GetRotations( radian3& Rot     );

    void operator=   ( view& Src        ); 

/////////////////////////////////////////////////////////////////////////////
protected:

    radian          m_Pitch;
    radian          m_Yaw;
    f32             m_Dist;
    vector3         m_Target;
};


/////////////////////////////////////////////////////////////////////////////

#endif