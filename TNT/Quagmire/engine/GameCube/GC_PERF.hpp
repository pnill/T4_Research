///////////////////////////////////////////////////////////////////////////
//
//  GC_PERF.HPP
//
///////////////////////////////////////////////////////////////////////////

#ifndef GCPERF_HPP
#define GCPERF_HPP

//////////////////////////////////////////////////////////////////////////
// INCLUDES
//////////////////////////////////////////////////////////////////////////

#include "x_types.hpp"


////////////////////////////////////////////////////////////////////////////
// DEFINES
////////////////////////////////////////////////////////////////////////////

#if defined( X_DEBUG )
//    #define ENABLE_GC_PERF_LIB  //Enable this to show performance graph
#endif

//////////////////////////////////////////////////////////////////////////
// CONSTANTS
//////////////////////////////////////////////////////////////////////////

// max # of samples to take per frame(MAX 256)
const s32 GCPERF_NUM_SAMPLES = 254;

// perf. autosample rate(in milliseconds)
const f32 GCPERF_AUTOSAMPLE_RATE = 0.75f;



// PERF lib event IDs to be supplied by the application
enum GCPERF_EVENT_ID
{
    GCPERF_EVENT_APP_TIME,

    // Add more events here....

    GCPERF_EVENT_COUNT
};

//--------------------------------------------------------------------------

const GXColor GCPERF_EVENT_COLOR[ GCPERF_EVENT_COUNT ] =
{
    { 255, 255, 0, 255 },   // GCPERF_EVENT_APP_TIME

    // Add colors to represent more events here...
};


////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
////////////////////////////////////////////////////////////////////////////

#if defined( ENABLE_GC_PERF_LIB )

    void GCPERF_EventStart( s32 EventID );
    void GCPERF_EventEnd  ( s32 EventID );

#else

    #define GCPERF_EventStart()
    #define GCPERF_EventEnd()

#endif


//////////////////////////////////////////////////////////////////////////

#endif // GCPERF_HPP