///////////////////////////////////////////////////////////////////////////
//
//  Q_SMEM.HPP
//
///////////////////////////////////////////////////////////////////////////

#ifndef Q_SMEM_HPP
#define Q_SMEM_HPP

///////////////////////////////////////////////////////////////////////////
//
//  Note that the stack and buffer occupy the same memory and may 
//  collide if too much memory is allocated.
//
//  +-------------------------------------------------------------+
//  |   STACK -->                                    <-- BUFFER   |
//  +-------------------------------------------------------------+
//
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// INCLUDES
///////////////////////////////////////////////////////////////////////////

#include "x_types.hpp"
#include "x_stats.hpp"


///////////////////////////////////////////////////////////////////////////
// BUFFER RESIZING
///////////////////////////////////////////////////////////////////////////
//
// The new specified scratch memory size will be put into effect after the 
// next page flip.
//
///////////////////////////////////////////////////////////////////////////

void    SMEM_SetSize                ( s32 NBytes );

///////////////////////////////////////////////////////////////////////////
// BUFFER ALLOCATION
///////////////////////////////////////////////////////////////////////////
//
// Memory allocated from the scratch buffer will be automatically freed
// after the next page flip.  If the scratch buffer cannot supply the 
// memory, it will assert internally.
//    
///////////////////////////////////////////////////////////////////////////

byte*   SMEM_BufferAlloc            ( s32 NBytes );

///////////////////////////////////////////////////////////////////////////
// STACK ALLOCATION
///////////////////////////////////////////////////////////////////////////
//
// Memory allocated on the scratch stack must be deallocated by the user.
// After the pageflip occurs if there is any memory remaining in the 
// scratch stack, SMem will assert internally.  You can easily deallocate
// scratch stack memory by pushing a marker before your allocation(s)
// and then popping to the marker once you are finished.
//
///////////////////////////////////////////////////////////////////////////

byte*   SMEM_StackAlloc             ( s32 NBytes );
void    SMEM_StackPushMarker        ( void );
void    SMEM_StackPopToMarker       ( void );

///////////////////////////////////////////////////////////////////////////
// STATS FOR TUNING AND MONITORING SCRATCH MEM USAGE
///////////////////////////////////////////////////////////////////////////
                                    
PSTAT_EXTERN( StatSMemAvailable   );    // Amount of free scratch memory
PSTAT_EXTERN( StatSMemStackUsed   );    // Amount of stack in use
PSTAT_EXTERN( StatSMemBufferUsed  );    // Amount of buffer in use

void    SMEM_ClearStats             ( void );

///////////////////////////////////////////////////////////////////////////
// END
///////////////////////////////////////////////////////////////////////////

#endif
